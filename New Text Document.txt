‚úÖ System Workflow Summary
User selects a PDF

User fills in multiple textboxes like:

receiptNoTextBox ‚Üí "receipt number"

usernameTextBox ‚Üí "username"

totalTextBox ‚Üí "total"

You combine all requests into a single instruction string

Flask extracts text from the PDF

flan-t5-base is prompted with:

mathematica
Copy
Edit
Extract receipt number, username, total: [PDF text]
Response returned in format like:

markdown
Copy
Edit
1. receipt number: 84723
2. username: John Doe
3. total: $79.99
üß† 1. C# ‚Äî Build Instruction Dynamically
‚úÖ C# UI Logic
csharp
Copy
Edit
private async void ExtractFromPDF_Click(object sender, EventArgs e)
{
    string filePath = pdfPathTextBox.Text;

    // Build instruction from user-specified fields
    List<string> fields = new List<string>();
    if (!string.IsNullOrWhiteSpace(receiptNoTextBox.Text)) fields.Add(receiptNoTextBox.Text);
    if (!string.IsNullOrWhiteSpace(usernameTextBox.Text)) fields.Add(usernameTextBox.Text);
    if (!string.IsNullOrWhiteSpace(totalTextBox.Text)) fields.Add(totalTextBox.Text);
    // Add more fields if needed

    string instruction = "Extract " + string.Join(", ", fields);

    using (var client = new HttpClient())
    using (var form = new MultipartFormDataContent())
    {
        form.Add(new StringContent(instruction), "instruction");

        var fileStream = File.OpenRead(filePath);
        var fileContent = new StreamContent(fileStream);
        fileContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue("application/pdf");
        form.Add(fileContent, "file", Path.GetFileName(filePath));

        var response = await client.PostAsync("http://localhost:5000/extract", form);
        if (response.IsSuccessStatusCode)
        {
            var json = await response.Content.ReadAsStringAsync();
            dynamic result = JsonConvert.DeserializeObject(json);
            resultTextBox.Text = result.result;
        }
        else
        {
            resultTextBox.Text = $"Error: {response.StatusCode}";
        }
    }
}
üß† 2. Flask ‚Äî No change needed in logic
The Python Flask server from earlier will still work ‚Äî instruction will look like:

text
Copy
Edit
Extract receipt number, username, total: [full PDF text]
But to improve formatting of output, you can post-process FLAN-T5 output like this:

üìç Optional: Format numbered output
Add this in Flask before returning:

python
Copy
Edit
# Clean and format response
fields = instruction.replace("Extract", "").strip().split(",")
formatted = "\n".join(f"{i+1}. {field.strip()}: " for i, field in enumerate(fields))

final_output = formatted + result  # or use regex to structure better

return jsonify({"result": final_output})
Or you could train FLAN-T5 to respond in structured JSON using prompt like:

text
Copy
Edit
Extract as JSON: {"receipt_number": ..., "username": ..., "total": ...}
But that‚Äôs more advanced ‚Äî for now, a numbered list is clean enough.

üìÑ Example Result
Instruction:

typescript
Copy
Edit
Extract receipt number, username, total
Response:

markdown
Copy
Edit
1. receipt number: 84723
2. username: John Doe
3. total: $79.99
ü™Ñ Bonus: Label the TextBoxes Dynamically (Optional in C#)
You could dynamically generate the textboxes if needed in future:

csharp
Copy
Edit
string[] fieldNames = { "Receipt No", "Username", "Total" };
foreach (string field in fieldNames)
{
    var label = new Label() { Text = field };
    var textBox = new TextBox() { Name = field.Replace(" ", "") + "TextBox" };
    this.Controls.Add(label);
    this.Controls.Add(textBox);
}